---
title: "Skrypty geoprzetwarzania"
subtitle: "Dostęp do danych satelitarnych"
author: "Krzysztof Dyba"
format:
  html:
    toc: true
    toc-title: " "
    embed-resources: true
    code-links:
      - text: Repozytorium
        icon: github
        href: https://github.com/kadyb/sg2025
---

```{r}
#| message: false
library("terra")
```

# Wprowadzenie

## Dane satelitarne

Dane satelitarne odgrywają kluczową rolę w systemach informacji geograficznej
i wykorzystywane są w szerokim zakresie do kartowania, analizy pokrycia terenu,
monitorowania zmian w środowisku, zarządzania kryzysowego czy
rolnictwa precyzyjnego. Źródłem danych mogą być:

* sensory optyczne (pozyskują dane w różnych spektrach fali elektromagnetycznej,
np. światło widzialne, bliska podczerwień, podczerwień krótkofalowa czy
podczerwień termalna).
* sensory radarowe (emitują impulsy radarowe, a następnie mierzą odbitą energię.
W przeciwieństwie do sensorów optycznych mogą być wykorzystywane do obrazowania
powierzchni przez chmury oraz w nocy).

W kontekście ogromnych zbiorów danych satelitarnych nie sposób pominąć
zasadniczych technologii ułatwiających ich przetwarzanie:

* **S**patio**T**emporal **A**sset **C**atalogs -- ustandaryzowany sposób
organizowania i opisywania zbiorów danych przestrzennych ułatwiający ich
wyszukiwanie oraz dostęp (<https://stacspec.org>).
* *Byte serving* (*range requests*) -- technika używana w protokole HTTP do
przesyłania tylko określonej części pliku z serwera do klienta. Jest to
szczególnie przydatne w przypadku dużych plików, gdzie pobieranie całego pliku
może być nieefektywne lub niepotrzebne. Ta technika umożliwia wydajny dostęp do
wymaganych zakresów danych bez przesyłania niepotrzebnych części.
  * **C**loud **O**ptimized **G**eotiff -- specjalny format przechowywania
  danych geoprzestrzennych (takich jak zdjęcia satelitarne) zaprojektowany z
  myślą o środowiskach chmurowych. Opiera się na standardowym formacie Geotiff,
  ale jest optymalizowany pod kątem wydajnego dostępu i przetwarzania w chmurze.
  Oprócz *byte serving*, stosowane są podglądy (*overviews*), czyli warstwy rastra
  w niższej rozdzielczości, umożliwiając jego renderowanie bez konieczności
  dostępu do danych w pełnej rozdzielczości (<https://www.cogeo.org/>).
  * **V**irtual **F**ile **S**ystems -- umożliwia jednolity dostęp do różnych
  typów przechowywania danych (<https://gdal.org/user/virtual_file_systems.html>).
  Jednym z modułów jest `vsicurl`, który zapewnia bezpośredni dostęp do zdalnych
  plików przez protokoły HTTP(S) i FTP bez konieczności pełnego pobierania,
  tym samym minimalizując transfer danych.

## Przetwarzanie potokowe

Przetwarzanie potokowe w kontekście analizy danych odnosi się organizacji
przepływu pracy w sposób liniowy (sekwencyjny). Oznacza to, że dane przepływają
przez serię etapów (funkcji), w których wynik jednego etapu służy jako wejście
do kolejnego. W praktyce sprawia to, że kod jest bardziej przejrzysty i
łatwiejszy do zrozumienia.

W **R** wbudowanym operatorem przypływu jest `|>`. Do jego zapisu można
wykorzystać skrót klawiszowy `CTRL + SHIFT + M`, jednak wymaga to zaznaczenia
opcji `Use native pipe operator` (zakłada `Code > Editing`) w **RStudio**.

Przykładowo, możemy wylosować 10 liczb z rozkładu normalnego, następnie obliczyć
wartość bezwzględną, posortować w kolejności rosnącej i finalnie nadpisać obiekt
`dane`.

```{r}
dane = rnorm(10)
dane |> 
  abs() |>
  sort() -> dane
dane
```

# Pozyskiwanie danych

Do obsługi katalogów STAC w **R** służy pakiet **rstac**, który umożliwia
wyszukiwanie i pobieranie danych zgodnie z tym standardem.

```{r}
library("rstac")
```

W pierwszym kroku należy zdefiniować źródło danych używając funkcji `stac()`.
Wykaz źródeł można znaleźć na [STAC Index](https://stacindex.org/). W naszym
przykładzie wykorzystamy usługę [Earth Search](https://element84.com/earth-search/),
która dostarcza m. in. zdjęcia satelitarne z Landsata oraz Sentinela.

```{r}
stac_source = stac("https://earth-search.aws.element84.com/v1")
stac_source
```

W wyniku tej operacji otrzymaliśmy obiekt `rstac_query`, który zawiera
informacje o zapytaniu HTTP, które zostanie wysłane do serwera. Możemy wyróżnić
dwie metody wysyłania żądań:

* GET (`get_request()`) -- służy głównie do pobierania danych z serwera. Dane
przesyłane są poprzez adres URL jako parametry zapytania.
* POST (`post_request()`) -- służy głównie do przesyłania danych na serwer. Dane 
są wysyłane w treści (*body*) żądania HTTP.

Wybór metody zależy od serwera.

Spróbujmy teraz odpytać serwer jakie zbiory danych znajdują się na nim.

```{r}
kolekcje = stac_source |>
  collections() |>
  get_request()
kolekcje
```

W odpowiedzi otrzymaliśmy obiekt, który jest wielopoziomową listą list. Można
samodzielnie sprawdzić jego strukturę używając funkcji `View()`. Eksploracja
takich obiektów jest bardziej skomplikowana w porównaniu do obiektów
jednowymiarowych (np. wektorów). Przykładowo, jeżeli chcemy sprawdzić pozostałe
dostępne zbiory danych, to należy wykorzystać funkcje `lapply()`, która wykonuje
iterację po każdym elemencie danych wejściowych (w tym przypadku listy),
stosując przy tym podaną funkcję. Jako wynika zwracana jest lista, którą
następnie można uprościć do wektora używając funkcji `unlist()`.

Dodatkowo, dla uproszczenia możemy zastosować funkcję lambda (inaczej funkcję
anonimową). Pozwala to zamienić słowo kluczowe `function()` na znak `\()`,
np. zamiast `lapply(lista, function(x) x^2)` będzie `lapply(lista, \(x) x^2)`.

```{r}
kolekcje_nazwy = unlist(lapply(kolekcje$collections, \(x) x$id))
kolekcje_nazwy
```

Uwaga! Dane z Sentinela-2 znajdują się w dwóch kolekcjach, tj. `sentinel-2-l2a`
(starsza) i `sentinel-2-c1-l2a` (nowsza). Aktualnie trwa aktualizacja produktów
do nowszej kolekcji `sentinel-2-c1-l2a` i ta powinna być preferowana, natomiast
starsza kolekcja w przyszłości nie będzie obsługiwana.

Teraz wyszukajmy dostępne produkty w ramach kolekcji `sentinel-2-c1-l2a`. Do
wyszukiwania danych służy funkcja `stac_search()` i umożliwia ona zdefiniowanie
takich parametrów jak:

- kolekcja (`collections`),
- zakres przestrzenny w układzie WGS 84 (`bbox`),
- interwał czasowy w standardzie [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
(`datetime`),
- maksymalna liczba produktów (`limit`).

W tym przypadku żądanie musimy wysłać za pomocą metody POST.

```{r}
stac_source |>
  stac_search(
    collections = "sentinel-2-c1-l2a",
    bbox = c(22.5, 51.1, 22.6, 51.2), # xmin, ymin, xmax, ymax (WGS84)
    datetime = "2023-01-01T00:00:00Z/2023-12-31T00:00:00Z", # RFC 3339
    limit = 5) |>
  post_request() -> obrazy
obrazy
```

Zostało znalezionych 288 produktów, które spełniają zadane warunki. Możemy
zobaczyć jakie warstwy (*assets*) i atrybuty (*fields*) są powiązane. Sprawdźmy
przykładowe cechy produktu (*properties*).

```{r}
# pierwsze 15 cech
names(obrazy$features[[1]]$properties)[1:15]
```

Mamy dostęp do 44 cech, które opisują produkt, m. in. data pozyskania, nazwa
platformy satelitarnej, procentowe zachmurzenie sceny, układ współrzędnych,
ID sceny, itd.

Sprawdźmy zachmurzenie wyszukanych scen. Określone jest one w atrybucie
`eo:cloud_cover`. W tym celu ponownie musimy wykorzystać funkcję `lapply()`.

```{r}
unlist(lapply(obrazy$features, \(x) x$properties$"eo:cloud_cover"))
```

Wyszukane sceny charakteryzują się wysokim zachmurzeniem w związku z czym ich
przydatność jest ograniczona. Oczywiście możemy dokonać prostej filtracji
modyfikując nasze poprzednie zapytanie. Do filtrowania przeznaczona jest
funkcja `ext_query()`.

```{r}
stac_source |>
  stac_search(
    collections = "sentinel-2-c1-l2a",
    bbox = c(22.5, 51.1, 22.6, 51.2),
    datetime = "2023-01-01T00:00:00Z/2023-12-31T00:00:00Z",
    limit = 5) |>
  ext_query(`eo:cloud_cover` < 10) |>
  post_request() -> obrazy

unlist(lapply(obrazy$features, \(x) x$properties$"eo:cloud_cover"))
```

Alternatywnie, zamiast używać wielopoziomowych list, możemy dokonać konwersji
obiektu `obrazy` do "przestrzennej ramki danych" (*simple features data frame*)
za pomocą funkcji `items_as_sf()`. Jednakże, na ten moment jest ona
eksperymentalna i mogą pojawić się niespodziewane problemy.

```{r}
df = items_as_sf(obrazy)
plot(sf::st_geometry(df)[1], main = "Zasięg sceny", axes = TRUE)
```

Po dokonaniu selekcji scen, możemy przystąpić do ich pobrania. Zasadniczo,
można to wykonać na kilka różnych sposobów używając:

- funkcji `assets_download()` z pakietu **rstac**,
- funkcji `download.file()` wbudowanej w **R**,
- modułu `/vsicurl/` dostępnego w pakietach obsługujących GDAL, np. **terra**,
- narzędzi GDAL (np. [gdalwarp](https://gdal.org/programs/gdalwarp.html))
dostępnych m. in. w powłoce [OSGeo4W](https://www.osgeo.org/projects/osgeo4w/)
na Windows.

## assets_download()

W funkcji `assets_download()` możemy zdefiniować, które warstwy chcemy pobrać
(argument `asset_names`). Jednak ma ona pewien mankament związany z dość
skomplikowanym zapisem ścieżek do pobranych plików wynikający ze struktury
katalogów STAC.

```{r}
#| eval: false
obrazy |>
  items_select(1) |>
  assets_download(asset_names = c("blue", "green", "red"))
```

Sceny satelitarne zazwyczaj zawierają niskorozdzielcze miniaturki w kompozycji
RGB. W przypadku danych z Sentinela-2 zapisane są one jako `thumbnail.jpg`.
Jeśli chcemy szybko podejrzeć dane, to możemy odwołać się do tej warstwy
i pozyskać do niej odnośnik przy pomocy funkcji `assets_url()`. Do wczytania
pliku .jpg wymagany jest dodatkowy pakiet, np. **imager**, który posiada funkcję
`load.image()`.

```{r}
#| message: false

library("imager")
par(mar = c(0, 0, 0, 0)) # usuń marginesy

obrazy |>
  items_select(1) |>
  assets_select(asset_names = "thumbnail") |>
  assets_url() |>
  load.image() |>
  plot(axes = FALSE)
```

## download.file()

Tak jak w powyższym przypadku, możliwe jest pozyskanie odnośników do pozostałych
warstw i pobranie danych przy użyciu funkcji `download.file()`, wymagającej
wskazania odnośników, z których zostaną pobrane dane oraz ścieżek zapisu.

```{r}
obrazy |>
   items_select(1) |>
   assets_select(asset_names = c("blue", "green", "red")) |>
   assets_url() -> urls
urls
```

Utwórzmy nowy folder o nazwie `sentinel` używając funkcji `dir.create()`.
Do stworzenia ścieżek zapisu należy podać nazwę pliku wraz z rozszerzeniem.
W tym celu można zastosować funkcję `basename()` do wyodrębnienia tych nazw
z odnośników. Następnie należy połączyć ścieżkę do katalogu ze ścieżką do pliku
wykorzystując funkcję `file.path()`.

```{r}
#| eval: false

dir.create("sentinel")
rastry = file.path("sentinel", basename(sentinel))
```

Finalnie, zastosujemy pętlę, która pobierze wszystkie pliki do lokalizacji
określonej przez nas.

```{r}
#| eval: false

for (i in seq_along(sentinel)) {
  download.file(sentinel[i], rastry[i], mode = "wb")
}
```

## /vsicurl/

Ostatnim sposobem jest wykorzystanie modułu `/vsicurl/` pochodzącego z GDAL bez
potrzeby pobierania całego zbioru danych. Działanie jest proste -- wystarczy
dodać przedrostek `/vsicurl/` do odnośników z rastrami używając funkcji
`paste0()`.

```{r}
urls = paste0("/vsicurl/", urls)
r = rast(urls)
r
```

Na końcu możemy przygotować kompozycję w świetle widzialnym używając funkcji
`plotRGB()`.

```{r}
plotRGB(r, r = 3, g = 2, b = 1, stretch = "lin")
```

Więcej informacji na temat wyszukiwania i pozyskiwania danych za pomocą
standardu STAC znajdziesz w oficjalnym tutorialu
[**Download data from a STAC API using R, rstac, and GDAL**](https://stacspec.org/en/tutorials/1-download-data-using-r/)
napisanym przez Michael Mahoney.

# Zadanie

**6.** Pobierz dowolną scenę satelitarną z Sentinela-2 o niskim zachmurzeniu
(maksymalnie 20%) i następnie:

- sprawdź metadane rastrów,
- przygotuj wizualizację w naturalnych barwach,
- pobierz losową próbę 10 tys. punktów dla kanału niebieskiego, zielonego,
czerwonego oraz bliskiej podczerwieni i zaprezentuj statystyki opisowe
(ustaw ziarno losowości oraz zwróć uwagę na brakujące wartości `NA`),
- zestaw cztery histogramy na jednym panelu,
- wykonaj wykres rozrzutu dla kanału czerwonego oraz bliskiej podczerwieni z
zaznaczoną linią `x = y` i ustawioną przezroczystością punktów, następnie
oblicz współczynnik korelacji Pearsona,
- oblicz znormalizowany różnicowy wskaźnik wegetacji
([NDVI](https://gisgeography.com/ndvi-normalized-difference-vegetation-index/))
i zaprezentuj go na mapie.
